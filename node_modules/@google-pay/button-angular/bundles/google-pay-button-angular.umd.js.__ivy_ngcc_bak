(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@google-pay/button-angular', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['google-pay'] = global['google-pay'] || {}, global['google-pay']['button-angular'] = {}), global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Keeps track scripts that have been requested by loadScript.
     */
    var cachedScripts = {};
    /**
     * Asynchronously loads a script keeping track of which scripts have already
     * requested and loaded.
     *
     * Multiple requests to the same resource will return the same promise.
     *
     * @param src Script URL to load
     */
    function loadScript(src) {
        var existing = cachedScripts[src];
        if (existing) {
            return existing;
        }
        var promise = new Promise(function (resolve, reject) {
            // Create script
            var script = document.createElement('script');
            script.src = src;
            script.async = true;
            // Script event listener callbacks for load and error
            var onScriptLoad = function () {
                resolve();
            };
            var onScriptError = function () {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                cleanup();
                // Remove from cachedScripts so that we can try loading again
                delete cachedScripts[src];
                script.remove();
                reject(new Error("Unable to load script " + src));
            };
            script.addEventListener('load', onScriptLoad);
            script.addEventListener('error', onScriptError);
            // Add script to document body
            document.body.appendChild(script);
            // Remove event listeners on cleanup
            function cleanup() {
                script.removeEventListener('load', onScriptLoad);
                script.removeEventListener('error', onScriptError);
            }
        });
        cachedScripts[src] = promise;
        return promise;
    }
    /**
     * Clears the script cache. Used for testing purposes only.
     */
    function clearScriptCache() {
        cachedScripts = {};
    }

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var __awaiter$1 = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Manages the lifecycle of the Google Pay button.
     *
     * Includes lifecycle management of the `PaymentsClient` instance,
     * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.
     */
    var ButtonManager = /** @class */ (function () {
        function ButtonManager(options) {
            var _this = this;
            this.handleClick = function () { return __awaiter$1(_this, void 0, void 0, function () {
                var config, request, result, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            config = this.config;
                            if (!config) {
                                throw new Error('google-pay-button: Missing configuration');
                            }
                            request = this.createLoadPaymentDataRequest(config);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.client.loadPaymentData(request)];
                        case 2:
                            result = _c.sent();
                            if (config.onLoadPaymentData) {
                                config.onLoadPaymentData(result);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _c.sent();
                            if (err_1.statusCode === 'CANCELED') {
                                if (config.onCancel) {
                                    config.onCancel(err_1);
                                }
                            }
                            else if (config.onError) {
                                config.onError(err_1);
                            }
                            else {
                                console.error(err_1);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); };
            this.options = options;
        }
        ButtonManager.prototype.getElement = function () {
            return this.element;
        };
        ButtonManager.prototype.isGooglePayLoaded = function () {
            var _a, _b;
            return 'google' in (window || global) && !!((_b = (_a = google === null || google === void 0 ? void 0 : google.payments) === null || _a === void 0 ? void 0 : _a.api) === null || _b === void 0 ? void 0 : _b.PaymentsClient);
        };
        ButtonManager.prototype.mount = function (element) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.isGooglePayLoaded()) return [3 /*break*/, 2];
                            return [4 /*yield*/, loadScript('https://pay.google.com/gp/p/js/pay.js')];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            this.element = element;
                            if (element) {
                                this.appendStyles();
                                if (this.config) {
                                    this.updateElement();
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ButtonManager.prototype.unmount = function () {
            this.element = undefined;
        };
        ButtonManager.prototype.configure = function (newConfig) {
            this.config = newConfig;
            if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {
                this.updateElement();
            }
            this.oldInvalidationValues = this.getInvalidationValues(newConfig);
        };
        /**
         * Creates client configuration options based on button configuration
         * options.
         *
         * This method would normally be private but has been made public for
         * testing purposes.
         *
         * @private
         */
        ButtonManager.prototype.createClientOptions = function (config) {
            var clientConfig = {
                environment: config.environment,
                merchantInfo: this.createMerchantInfo(config),
            };
            if (config.onPaymentDataChanged || config.onPaymentAuthorized) {
                clientConfig.paymentDataCallbacks = {};
                if (config.onPaymentDataChanged) {
                    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
                    clientConfig.paymentDataCallbacks.onPaymentDataChanged = function (paymentData) {
                        var result = config.onPaymentDataChanged(paymentData);
                        return result || {};
                    };
                }
                if (config.onPaymentAuthorized) {
                    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
                    clientConfig.paymentDataCallbacks.onPaymentAuthorized = function (paymentData) {
                        var result = config.onPaymentAuthorized(paymentData);
                        return result || {};
                    };
                }
            }
            return clientConfig;
        };
        ButtonManager.prototype.createIsReadyToPayRequest = function (config) {
            var paymentRequest = config.paymentRequest;
            var request = {
                apiVersion: paymentRequest.apiVersion,
                apiVersionMinor: paymentRequest.apiVersionMinor,
                allowedPaymentMethods: paymentRequest.allowedPaymentMethods,
                existingPaymentMethodRequired: config.existingPaymentMethodRequired,
            };
            return request;
        };
        /**
         * Constructs `loadPaymentData` request object based on button configuration.
         *
         * It infers request properties like `shippingAddressRequired`,
         * `shippingOptionRequired`, and `billingAddressRequired` if not already set
         * based on the presence of their associated options and parameters. It also
         * infers `callbackIntents` based on the callback methods defined in button
         * configuration.
         *
         * This method would normally be private but has been made public for
         * testing purposes.
         *
         * @private
         */
        ButtonManager.prototype.createLoadPaymentDataRequest = function (config) {
            var request = Object.assign(Object.assign({}, config.paymentRequest), { merchantInfo: this.createMerchantInfo(config) });
            // TODO: #13 re-enable inferrence if/when we agree as a team
            return request;
        };
        ButtonManager.prototype.createMerchantInfo = function (config) {
            var merchantInfo = Object.assign({}, config.paymentRequest.merchantInfo);
            // apply softwareInfo if not set
            if (!merchantInfo.softwareInfo) {
                merchantInfo.softwareInfo = {
                    id: this.options.softwareInfoId,
                    version: this.options.softwareInfoVersion,
                };
            }
            return merchantInfo;
        };
        ButtonManager.prototype.isMounted = function () {
            return this.element != null && this.element.isConnected !== false;
        };
        ButtonManager.prototype.removeButton = function () {
            var e_1, _c;
            if (this.element instanceof ShadowRoot || this.element instanceof Element) {
                try {
                    for (var _d = __values(Array.from(this.element.children)), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var child = _e.value;
                        if (child.tagName !== 'STYLE') {
                            child.remove();
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        ButtonManager.prototype.updateElement = function () {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var element, buttonOptions, rootNode, button, showButton, readyToPay, err_2, readyToPayResponse;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!this.isMounted())
                                return [2 /*return*/];
                            element = this.element;
                            if (!this.config) {
                                throw new Error('google-pay-button: Missing configuration');
                            }
                            // remove existing button
                            this.removeButton();
                            this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));
                            buttonOptions = {
                                buttonType: this.config.buttonType,
                                buttonColor: this.config.buttonColor,
                                buttonSizeMode: this.config.buttonSizeMode,
                                onClick: this.handleClick,
                            };
                            rootNode = (_a = this.element) === null || _a === void 0 ? void 0 : _a.getRootNode();
                            if (rootNode instanceof ShadowRoot) {
                                buttonOptions.buttonRootNode = rootNode;
                            }
                            button = this.client.createButton(buttonOptions);
                            this.setClassName(element, [element.className, 'not-ready']);
                            element.appendChild(button);
                            showButton = false;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config))];
                        case 2:
                            readyToPay = _c.sent();
                            showButton =
                                (readyToPay.result && !this.config.existingPaymentMethodRequired)
                                    || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)
                                    || false;
                            return [3 /*break*/, 4];
                        case 3:
                            err_2 = _c.sent();
                            console.error(err_2);
                            return [3 /*break*/, 4];
                        case 4:
                            if (!this.isMounted())
                                return [2 /*return*/];
                            if (showButton) {
                                try {
                                    this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));
                                }
                                catch (err) {
                                    console.log('Error with prefetch', err);
                                }
                                // remove hidden className
                                this.setClassName(element, (element.className || '').split(' ').filter(function (className) { return className && className !== 'not-ready'; }));
                            }
                            if (this.isReadyToPay !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result) || this.paymentMethodPresent !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent)) {
                                this.isReadyToPay = !!(readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result);
                                this.paymentMethodPresent = readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent;
                                if (this.config.onReadyToPayChange) {
                                    readyToPayResponse = {
                                        isButtonVisible: showButton,
                                        isReadyToPay: this.isReadyToPay,
                                    };
                                    if (this.paymentMethodPresent) {
                                        readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;
                                    }
                                    this.config.onReadyToPayChange(readyToPayResponse);
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ButtonManager.prototype.setClassName = function (element, classNames) {
            var className = classNames.filter(function (name) { return name; }).join(' ');
            if (className) {
                element.className = className;
            }
            else {
                element.removeAttribute('class');
            }
        };
        ButtonManager.prototype.appendStyles = function () {
            var _a, _b;
            if (typeof document === 'undefined')
                return;
            var rootNode = (_a = this.element) === null || _a === void 0 ? void 0 : _a.getRootNode();
            var styleId = "default-google-style-" + this.options.cssSelector.replace(/[^\w-]+/g, '');
            // initialize styles if rendering on the client:
            if (rootNode) {
                if (!((_b = rootNode.getElementById) === null || _b === void 0 ? void 0 : _b.call(rootNode, styleId))) {
                    var style = document.createElement('style');
                    style.id = styleId;
                    style.type = 'text/css';
                    style.innerHTML = "\n          " + this.options.cssSelector + " {\n            display: inline-block;\n          }\n          " + this.options.cssSelector + ".not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        ";
                    if (rootNode instanceof Document && rootNode.head) {
                        rootNode.head.appendChild(style);
                    }
                    else {
                        rootNode.appendChild(style);
                    }
                }
            }
        };
        ButtonManager.prototype.isClientInvalidated = function (newConfig) {
            var _this = this;
            if (!this.oldInvalidationValues)
                return true;
            var newValues = this.getInvalidationValues(newConfig);
            return newValues.some(function (value, index) { return value !== _this.oldInvalidationValues[index]; });
        };
        ButtonManager.prototype.getInvalidationValues = function (config) {
            var _a, _b;
            return [
                config.environment,
                config.existingPaymentMethodRequired,
                !!config.onPaymentDataChanged,
                !!config.onPaymentAuthorized,
                config.buttonColor,
                config.buttonType,
                config.buttonSizeMode,
                config.paymentRequest.merchantInfo.merchantId,
                config.paymentRequest.merchantInfo.merchantName,
                (_a = config.paymentRequest.merchantInfo.softwareInfo) === null || _a === void 0 ? void 0 : _a.id,
                (_b = config.paymentRequest.merchantInfo.softwareInfo) === null || _b === void 0 ? void 0 : _b.version,
            ];
        };
        return ButtonManager;
    }());

    var name = "@google-pay/button-angular";
    var version = "2.1.5";
    var description = "Angular component for Google Pay button";
    var main = "dist/index.js";
    var repository = {
        type: "git",
        url: "https://github.com/google-pay/google-pay-button",
        directory: "src/button-angular"
    };
    var homepage = "https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme";
    var engines = {
        node: ">=8.0.0"
    };
    var author = "socsieng@google.com";
    var license = "Apache-2.0";
    var scripts = {
        build: "ng build --prod"
    };
    var dependencies = {
        "@types/googlepay": "^0.5.1"
    };
    var peerDependencies = {
        "@angular/core": ">=8.0.0",
        "@types/googlepay": "^0.5.1"
    };
    var files = [
        "dist/*",
        "bundles/*",
        "ems2015/*",
        "fesm2015/*",
        "lib/*",
        "button-angular/*",
        "google-pay-button-angular.*",
        "*.d.ts",
        "*.json",
        "README.md"
    ];
    var keywords = [
        "googlepay",
        "google-pay",
        "google-pay-button",
        "button",
        "angular"
    ];
    var devDependencies = {
        "@angular-devkit/build-ng-packagr": "^0.1002.0",
        "@angular/core": "^10.2.2",
        "ng-packagr": "^10.1.2"
    };
    var _package = {
        name: name,
        version: version,
        description: description,
        main: main,
        repository: repository,
        homepage: homepage,
        engines: engines,
        author: author,
        license: license,
        scripts: scripts,
        dependencies: dependencies,
        peerDependencies: peerDependencies,
        files: files,
        keywords: keywords,
        devDependencies: devDependencies
    };

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a new function that delays invocations to the original function
     * within a specified wait period. The last invocation within this time period
     * gets invoked. All earlier invocations are ignore.
     *
     * @param func The function to invoke.
     * @param wait The time in milliseconds to wait for idle invocations.
     */
    function debounce(func, wait) {
        if (wait === void 0) { wait = 0; }
        var timeout;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            window.clearTimeout(timeout);
            var later = function () {
                timeout = undefined;
                return func.apply(void 0, __spread(args));
            };
            return new Promise(function (resolve) {
                timeout = window.setTimeout(function () {
                    var result = later();
                    resolve(result);
                }, wait);
            });
        };
    }

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var GooglePayButtonComponent = /** @class */ (function () {
        function GooglePayButtonComponent(elementRef) {
            var _this = this;
            this.elementRef = elementRef;
            this.manager = new ButtonManager({
                cssSelector: 'google-pay-button',
                softwareInfoId: name,
                softwareInfoVersion: version,
            });
            this.initializeButton = debounce(function () {
                if (!_this.assertRequiredProperty('paymentRequest')) {
                    return;
                }
                if (!_this.assertRequiredProperty('environment')) {
                    return;
                }
                var config = {
                    paymentRequest: _this.paymentRequest,
                    environment: _this.environment,
                    existingPaymentMethodRequired: _this.existingPaymentMethodRequired,
                    onPaymentDataChanged: _this.paymentDataChangedCallback,
                    onPaymentAuthorized: _this.paymentAuthorizedCallback,
                    buttonColor: _this.buttonColor,
                    buttonType: _this.buttonType,
                    buttonSizeMode: _this.buttonSizeMode,
                    onReadyToPayChange: function (result) {
                        if (_this.readyToPayChangeCallback) {
                            _this.readyToPayChangeCallback(result);
                        }
                        _this.dispatch('readytopaychange', result);
                    },
                    onCancel: function (reason) {
                        if (_this.cancelCallback) {
                            _this.cancelCallback(reason);
                        }
                        _this.dispatch('cancel', reason);
                    },
                    onError: function (error) {
                        var _a;
                        if (_this.errorCallback) {
                            (_a = _this.errorCallback) === null || _a === void 0 ? void 0 : _a.call(_this, error);
                        }
                        _this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error: error }));
                    },
                    onLoadPaymentData: function (paymentData) {
                        if (_this.loadPaymentDataCallback) {
                            _this.loadPaymentDataCallback(paymentData);
                        }
                        _this.dispatch('loadpaymentdata', paymentData);
                    },
                };
                _this.manager.configure(config);
            });
        }
        Object.defineProperty(GooglePayButtonComponent.prototype, "isReadyToPay", {
            get: function () {
                return this.manager.isReadyToPay;
            },
            enumerable: false,
            configurable: true
        });
        GooglePayButtonComponent.prototype.ngOnInit = function () {
            return this.manager.mount(this.elementRef.nativeElement);
        };
        GooglePayButtonComponent.prototype.ngOnChanges = function () {
            return this.initializeButton();
        };
        GooglePayButtonComponent.prototype.assertRequiredProperty = function (name) {
            var value = this[name];
            if (value === null || value === undefined) {
                this.throwError(Error("Required property not set: " + name));
                return false;
            }
            return true;
        };
        /**
         * Throws an error.
         *
         * Used for testing purposes so that the method can be spied on.
         */
        GooglePayButtonComponent.prototype.throwError = function (error) {
            throw error;
        };
        GooglePayButtonComponent.prototype.dispatch = function (type, detail) {
            this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {
                bubbles: true,
                cancelable: false,
                detail: detail,
            }));
        };
        return GooglePayButtonComponent;
    }());
    GooglePayButtonComponent.decorators = [
        { type: core.Directive, args: [{
                    selector: 'google-pay-button',
                },] }
    ];
    GooglePayButtonComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    GooglePayButtonComponent.propDecorators = {
        paymentRequest: [{ type: core.Input }],
        environment: [{ type: core.Input }],
        existingPaymentMethodRequired: [{ type: core.Input }],
        buttonColor: [{ type: core.Input }],
        buttonType: [{ type: core.Input }],
        buttonSizeMode: [{ type: core.Input }],
        paymentDataChangedCallback: [{ type: core.Input }],
        paymentAuthorizedCallback: [{ type: core.Input }],
        readyToPayChangeCallback: [{ type: core.Input }],
        loadPaymentDataCallback: [{ type: core.Input }],
        cancelCallback: [{ type: core.Input }],
        errorCallback: [{ type: core.Input }]
    };

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var GooglePayButtonModule = /** @class */ (function () {
        function GooglePayButtonModule() {
        }
        return GooglePayButtonModule;
    }());
    GooglePayButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [GooglePayButtonComponent],
                    imports: [],
                    exports: [GooglePayButtonComponent],
                },] }
    ];

    /**
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *      http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.GooglePayButtonComponent = GooglePayButtonComponent;
    exports.GooglePayButtonModule = GooglePayButtonModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=google-pay-button-angular.umd.js.map
